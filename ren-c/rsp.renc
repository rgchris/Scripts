Rebol [
    Title: "RSP Preprocessor"
    Author: "Christopher Ross-Gill"
    Date: 8-Feb-2019
    Version: 0.5.0
    File: %rsp.renc

    Purpose: "Rebol-embedded Markup"

    Home: http://ross-gill.com/page/RSP
    Rights: http://opensource.org/licenses/Apache-2.0

    Type: module
    Name: rgchris.rsp
    Exports: [
        sanitize build-tag load-rsp render render-each
    ]

    History: [
        08-Feb-2019 0.5.0
        "Reworked BUILD-TAG function"

        11-Dec-2018 0.4.3
        "Ren-C Late 2018 Changes; Add BUILD-TAG"

        02-Sep-2017 0.4.2
        "Replace GET/ANY"

        21-Jul-2017 0.4.1
        _

        13-Jun-2013 0.4.0
        "Support Extended Characters in SANITIZE"

        12-Jun-2013 0.3.0
        "Add SANITIZE function"

        12-Jun-2013 0.2.0
        "Extracted from QuarterMaster"

        14-Nov-2002 _
        "Build-Tag 1.2.0 by Andrew Martin"
    ]

    Comment: [
        "Extracted from the QuarterMaster web framework"
    ]
]

blockify: any [
    :blockify

    make action! [
        [value [<opt> any-value!]]
        [compose [(value)]]
    ]
]

sanitize: use [
    ascii html* extended
][
    ascii: charset [
        "^/^-"
        #"^(20)" - #"^(7E)"
    ]

    html*: exclude ascii charset {&<>"}

    extended: complement charset [
        #"^(00)" - #"^(7F)"
    ]

    make action! [
        [
            text [text!]
            char:
        ]
        [
            parse form text [
                copy text any [
                    text: some html*
                    |
                    change #"<" "&lt;"
                    |
                    change #">" "&gt;"
                    |
                    change #"&" "&amp;"
                    |
                    change #"^"" "&quot;"
                    |
                    remove #"^M"
                    |
                    change copy char extended
                    (
                        unspaced [
                            "&#" to integer! char/1 #";"
                        ]
                    )
                    |
                    change skip "&#65533;"
                ]
            ]

            any [
                text
                copy ""
            ]
        ]
    ]
]

build-tag: use [
    to-name slash
][
    to-name: func [
        name [word! path!]
    ][
        back replace/all next mold name #"/" #":"
    ]

    slash: first [/]

    make action! [
        [
            "Generates a tag from a composed block."
            values [block!] "Block of parens to evaluate and other data."
            tag: has-value: xml?: name: is-name: value:
        ]
        [
            xml?: false

            tag: try collect [
                is-name: [
                    word! | and path! into [word! word!]
                ]

                has-value: [
                    [
                        set value [
                            get-word! | get-path! | group!
                        ]
                        (value: reeval value)
                        |
                        and not [
                            slash | is-name
                        ]
                        set value skip
                    ]
                    (
                        value: switch type of :value [
                            text!
                            url!
                            email! [
                                value
                            ]

                            logic!
                            blank! [
                                either :value [name] [_]
                            ]

                            binary! [
                                enbase value
                            ]

                            tag! [
                                to text! value
                            ]

                            file! [
                                replace/all as text! value #" " "%20"
                            ]

                            char! [
                                form value
                            ]

                            date! [
                                ; form-date value "%c"
                                form value
                            ]

                            tuple! [
                                unspaced [
                                    #"#" enbase/base to binary! value 16
                                ]
                            ]

                            issue!
                            integer!
                            decimal!
                            money!
                            time!
                            percent! [
                                mold value
                            ]

                            lit-word! [
                                as text! value
                            ]

                            (_)
                        ]
                    )
                ]

                parse values [
                    set name [
                        '?xml
                        (xml?: true)
                        |
                        is-name
                    ]
                    (keep to-name name)

                    any [
                        slash
                        end
                        (
                            keep either xml? ["?"] [" /"]
                            xml?: false
                        )
                        |
                        set name is-name
                        [
                            has-value
                            (
                                if value [
                                    keep unspaced [
                                        #" " to-name name
                                        {="} sanitize form value {"}
                                    ]
                                ]
                            )
                            |
                            (
                                keep #" "
                                keep to-name name
                            )
                        ]
                    ]

                    end (
                        if xml? [
                            keep #"?"
                        ]
                    )
                    |
                    set name refinement!
                    (keep form name)
                    |
                    slash
                    set name is-name
                    (
                        keep #"/"
                        keep to-name name
                    )
                    |
                    end
                    (tag: [])
                ]
            ]

            if tag: unspaced tag [
                to tag! tag
            ]
        ]
    ]
]

load-rsp: use [
    prototype to-set-block
][
    prototype: make object! [
        out*: _

        prin: method [
            value
        ][
            append out* rejoin compose [
                (value)
            ]
        ]

        print: method [
            value
        ][
            prin value
            prin newline
        ]
    ]

    to-set-block: make action! [
        [
            locals [block! object!]
            word:
        ]
        [
            case [
                object? locals [
                    body of locals
                ]

                block? locals [
                    collect [
                        keep []
                        ; force response from COLLECT

                        parse locals [
                            any [
                                set word word!
                                (
                                    keep reduce [
                                        to set-word! word
                                        try get :word
                                    ]
                                )
                            ]
                        ]
                    ]
                ]
            ]
        ]
    ]

    make action! [
        [
            body [text!]
            source: mark: modifier:
        ]
        [
            source: delimit #"^/" collect [
                keep unspaced ["out*: make text! " length of body]
                parse body [
                    any [
                        end break
                        |
                        "<%" [
                            "=="
                            copy mark to "%>"
                            (
                                keep unspaced [
                                    "prin sanitize form (^/" mark "^/)"
                                ]
                            )
                            |
                            #"="
                            copy mark to "%>"
                            (
                                keep unspaced [
                                    "prin (^/" mark "^/)"
                                ]
                            )
                            |
                            #"!"
                            copy mark to "%>"
                            (
                                keep unspaced [
                                    "prin any [build-tag [^/" mark "^/] {}]"
                                ]
                            )
                            |
                            #"#"
                            to "%>"
                            ; comment
                            |
                            copy mark to "%>"
                            (keep mark)
                            |
                            mark:
                            (
                                fail [
                                    "Expected '%>' at"
                                    mold copy/part mark 20
                                ]
                            )
                        ]
                        "%>"
                        |
                        copy mark to "<%"
                        (
                            keep unspaced [
                                "prin " mold mark
                            ]
                        )
                        |
                        copy mark some skip
                        (
                            keep unspaced [
                                "prin " mold mark
                            ]
                        )
                    ]
                ]

                keep "out*"
            ]

            make action! compose/deep/only [
                [
                    args [block! object!]
                ]
                [
                    args: make prototype to-set-block args
                    take blockify entrap bind/copy (load source) args
                ]
            ]
        ]
    ]
]


resolve-source: make action! [
    [
        source [file! url! text! binary!]
    ]
    [
        case/all [
            file? source [
                source: read source
            ]

            url? source [
                source: read source
            ]

            binary? source [
                source: to text! source
            ]
        ]

        source
    ]
]

recursion: make object! [
    depth: 0

    increment: does [
        depth: depth + 1
    ]

    decrement: does [
        depth: depth - 1
    ]

    allow?: does [
        depth < 20
    ]
]

prep-args: make action! [
    [
        items [blank! word! block!]
        locals [<opt> block! object!]
    ]
    [
        collect [
            keep case [
                null? :locals [
                    []
                    ; force a response from COLLECT
                ]

                block? locals [
                    locals
                ]

                object? locals [
                    words-of locals
                ]
            ]

            keep case [
                word? items [
                    items
                ]

                block? items [
                    items
                ]
            ]
        ]
    ]
]

render: make action! [
    [
        rsp [file! url! text!]
        /with
        locals [block! object!]
    ]
    [
        either recursion/allow? [
            recursion/increment

            rsp: load-rsp resolve-source rsp
            rsp prep-args _ :locals

            elide recursion/decrement
        ][
            ""
        ]
    ]
]

render-each: make action! [
    [
        'items [word! block!]
        source [block!]
        rsp [file! url! text!]
        /with
        locals [block! object!]
    ]
    [
        either recursion/allow? [
            recursion/increment

            rsp: load-rsp resolve-source rsp

            rejoin collect [
                keep ""
                ; force response from COLLECT

                for-each :items source compose/only [
                    keep rsp (
                        prep-args items :locals
                    )
                ]
            ]

            elide recursion/decrement
        ][
            ""
        ]
    ]
]
